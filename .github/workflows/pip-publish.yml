# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: release

on:
  push:
    branches:
      - "releases/**"
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Autobump version
        run: |
          # from refs/tags/v1.2.3 get 1.2.3
          VERSION=$(echo $GITHUB_REF | sed 's#.*/v##')
          PLACEHOLDER='__version__ = "develop"'
          VERSION_FILE='aclick/_version.py'
          # ensure the placeholder is there. If grep doesn't find the placeholder
          # it exits with exit code 1 and github actions aborts the build. 
          echo "$VERSION"
          grep "$PLACEHOLDER" "$VERSION_FILE"
          sed -i "s/$PLACEHOLDER/__version__ = \"${VERSION}\"/g" "$VERSION_FILE"
        shell: bash
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
          pip install setuptools wheel twine pytest
      - name: Run tests
        run: |
          python -m pytest
      - name: Build docs
        run: |
          pip install -r docs/requirements.txt
          cd docs && make html
      - name: "Clone repo for pushing docs"
        uses: actions/checkout@v2
        with:
          path: _tmp_doc_build
      - name: Publish docs
        run: |
          cd _tmp_doc_build
          git config user.name "Release Bot"
          git config user.email "release-bot@aclick"
          git switch --orphan docs
          cp -r ../docs/_build/html docs
          touch docs/.nojekyll
          git add docs
          git commit -m "Automated docs update"
          git push --force -u origin docs
          cd ..
          rm -rf _tmp_doc_build
      # - name: Build and publish
      #   env:
      #     TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
      #     TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      #   run: |
      #     python setup.py sdist bdist_wheel
      #     twine upload dist/*
